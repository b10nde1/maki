import {log, importInterface, fromatStepArguments} from "./src/utilities/utilities.js";
import * as fs from "fs";
import _build from "./configs/build.config.json" assert{type: "json"};
import _mapping from "./configs/mapping.config.json" assert{type: "json"};
import _capabilities from "./configs/capabilities.config.json" assert{type: "json"};

const market = process.env.site_target || _build.target;
const outputPath = `./${_capabilities.targetFolder}/output`;
let gherkinKeyword = _capabilities.gherkinKeys;

_build.scope[market].forEach(scopeElement => {
    log(`build start for ${scopeElement} - ${market}`);

    const tempScriptPath = `${_mapping.feature.path[scopeElement]}${scopeElement}.feature`;
    const tempFeature = fs.readFileSync(`./scripts${tempScriptPath}`, "utf-8");
    const splitFeatureData = tempFeature.split("\n");
    let tempGherkinKey = [];

    let tempOutput = `// Code auto generated by Maki - ${new Date().toGMTString()}\n\n`;
    tempOutput += "%DYNAMIC_IMPORT%";
    tempOutput += `import _commonProperties from '../../properties/common.properties.json' assert{type: "json"};\n`;
    tempOutput += `import _marketProperties from '../../properties/${market}.properties.json' assert{type: "json"};\n\n`;
    tempOutput += importInterface(_build.interface[scopeElement], _capabilities, market);

    for (let compt = 3; compt < splitFeatureData.length; compt++) {
        const tempSteps = splitFeatureData[compt].trim().split(" ");
        const stepObj = fromatStepArguments(tempSteps.slice(1).join(" "));
        tempGherkinKey.push(tempSteps[0]);

        tempOutput += `\n${tempSteps[0]}("`
            + `${stepObj.step}", async (${stepObj.params}) => {`
            + ` ${stepObj.action ? "await " + stepObj.action : ""} `
            + `});`;
    }

    // import for cucumber
    tempOutput = tempOutput.replace(
        "%DYNAMIC_IMPORT%",
        `import { `
            + `${(gherkinKeyword.filter(ghkElement => tempGherkinKey.includes(ghkElement))).join(", ")} }`
        + ` from '@cucumber/cucumber';\n\n`);

    tempOutput = tempOutput.replaceAll("#", "//");

    // generate the steps file
    !fs.existsSync(outputPath) && fs.mkdirSync(outputPath);

    // copy feature file into output
    fs.copyFileSync(`scripts${tempScriptPath}`, `${_capabilities.targetFolder}/${scopeElement}.feature`);

    // generate the step def file
    fs.writeFileSync(`${outputPath}/${scopeElement}.steps.js`, tempOutput);

    log(`build completed for ${scopeElement} - ${market}`);
});